-- MySQL Script generated by MySQL Workbench
-- Sun Dec 16 15:19:42 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema brasil
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema brasil
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `brasil` DEFAULT CHARACTER SET utf8 ;
USE `brasil` ;

-- -----------------------------------------------------
-- Table `brasil`.`pessoas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `brasil`.`pessoas` (
  `cpf` BIGINT(11) UNSIGNED ZEROFILL NOT NULL,
  `nome` VARCHAR(120) NOT NULL,
  PRIMARY KEY (`cpf`),
  INDEX `nomes` (`nome` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `brasil`.`empresas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `brasil`.`empresas` (
  `cnpj` BIGINT(14) UNSIGNED ZEROFILL NOT NULL COMMENT 'CNPJ da empresa',
  `razao_social` VARCHAR(200) NOT NULL COMMENT 'Nome da raz√£o social',
  PRIMARY KEY (`cnpj`),
  INDEX `razoesSociais` (`razao_social` ASC))
ENGINE = InnoDB;

USE `brasil` ;

-- -----------------------------------------------------
-- function validacpf
-- -----------------------------------------------------

DELIMITER $$
USE `brasil`$$
CREATE FUNCTION validacpf(cpf bigint(11) UNSIGNED ZEROFILL) 
RETURNS TINYINT 
DETERMINISTIC 
NO SQL 
SQL SECURITY DEFINER
BEGIN
/* Funcao de validacao de cpf diretamente no banco mysql */
/* Baseada na discussao publicada em https://goo.gl/DPgYJ8 */
DECLARE INDICE, SOMA, DIG1, DIG2 INT;
/* cpf com numeros repetidos ou quantidade de digitos insuficiente sao imediatamente recusados */
IF ((cpf = "11111111111") OR (cpf = "22222222222") OR (cpf = "33333333333") OR (cpf = "44444444444") OR (cpf = "55555555555") OR (cpf = "66666666666") OR (cpf = "77777777777") OR (cpf = "88888888888") OR (cpf = "99999999999") OR (cpf = "00000000000")) THEN
 RETURN FALSE;
ELSE
 /* Caso nao sejam numeros repetidos, inicia a validacao */
 SET INDICE = 1;
 SET SOMA = 0;
 WHILE (INDICE <= 9) DO
  SET SOMA = SOMA + CAST(SUBSTRING(cpf, INDICE, 1) AS UNSIGNED) * (11 - INDICE);
  SET INDICE = INDICE + 1;
 END WHILE;
 SET DIG1 = 11 - (SOMA % 11);
 IF DIG1 > 9 THEN
  SET DIG1 = 0;
 END IF;
 SET INDICE = 1;
 SET SOMA = 0;
 WHILE (INDICE <= 10) DO
  SET SOMA = SOMA + CAST(SUBSTRING(cpf, INDICE, 1) AS UNSIGNED) * (12 - INDICE);
  SET INDICE = INDICE + 1;
 END WHILE;
 SET DIG2 = 11 - (SOMA % 11);
 IF DIG2 > 9 THEN
  SET DIG2 = 0;
 END IF;
 IF ((DIG1 = SUBSTRING(cpf, LENGTH(cpf)-1, 1)) AND (DIG2 = SUBSTRING(cpf, LENGTH(cpf), 1))) THEN
  RETURN TRUE;
 ELSE
  RETURN FALSE;
 END IF;
END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function validacnpj
-- -----------------------------------------------------

DELIMITER $$
USE `brasil`$$
CREATE FUNCTION validacnpj(cnpj BIGINT(14) UNSIGNED ZEROFILL) 
RETURNS TINYINT 
DETERMINISTIC 
NO SQL 
SQL SECURITY DEFINER
BEGIN
/* Funcao de validacao de cnpj diretamente banco mysql */
/* Baseada na discussao publicada em https://goo.gl/DPgYJ8 */

DECLARE INDICE, SOMA, DIG1, DIG2 INT;

/* cnpj com numeros repetidos ou quantidade de digitos insuficiente sao imediatamente recusados */
IF ((cnpj = "11111111111111") OR (cnpj = "22222222222222") OR (cnpj = "33333333333333") OR (cnpj = "44444444444444") OR (cnpj = "55555555555555") OR (cnpj = "66666666666666") OR (cnpj = "77777777777777") OR (cnpj = "88888888888888") OR (cnpj = "99999999999999") OR (cnpj = "00000000000000")) THEN
 RETURN FALSE;
ELSE
 /* Caso nao sejam numeros repetidos, inicia a validacao */
 /* Calculo do digito 1 */
 SET INDICE = 1;
 SET SOMA = 0;
 WHILE (INDICE <= 12) DO
  IF (INDICE <= 4) THEN
   SET SOMA = SOMA + CAST(SUBSTRING(cnpj, INDICE, 1) AS UNSIGNED) * (6 - INDICE);
   SET INDICE = INDICE + 1;
  ELSE
   SET SOMA = SOMA + CAST(SUBSTRING(cnpj, INDICE, 1) AS UNSIGNED) * (14 - INDICE);
   SET INDICE = INDICE + 1;
  END IF;
 END WHILE;
 SET DIG1 = 11 - (SOMA % 11);
 IF DIG1 > 9 THEN
  SET DIG1 = 0;
 END IF;
 /* Calculo do digito 2 */
 SET INDICE = 1;
 SET SOMA = 0;
 WHILE (INDICE <= 13) DO
  IF (INDICE <= 5) THEN
   SET SOMA = SOMA + CAST(SUBSTRING(cnpj, INDICE, 1) AS UNSIGNED) * (7 - INDICE);
   SET INDICE = INDICE + 1;
  ELSE
   SET SOMA = SOMA + CAST(SUBSTRING(cnpj, INDICE, 1) AS UNSIGNED) * (15 - INDICE);
   SET INDICE = INDICE + 1;
  END IF;
 END WHILE;
 SET DIG2 = 11 - (SOMA % 11);
 IF DIG2 > 9 THEN
  SET DIG2 = 0;
 END IF;
 /* Validando */
 IF ((DIG1 = SUBSTRING(cnpj, LENGTH(cnpj)-1, 1)) AND (DIG2 = SUBSTRING(cnpj, LENGTH(cnpj), 1))) THEN
  RETURN TRUE;
 ELSE
  RETURN FALSE;
 END IF;
END IF;
END$$

DELIMITER ;
USE `brasil`;

DELIMITER $$
USE `brasil`$$
CREATE DEFINER = CURRENT_USER TRIGGER `brasil`.`pessoas_BEFORE_INSERT` BEFORE INSERT ON `pessoas` FOR EACH ROW
BEGIN
IF (NOT validacpf(NEW.cpf)) THEN
   SET NEW.cpf=NULL;
END IF;
END$$

USE `brasil`$$
CREATE DEFINER = CURRENT_USER TRIGGER `brasil`.`empresas_BEFORE_INSERT` BEFORE INSERT ON `empresas` FOR EACH ROW
BEGIN
IF (NOT validacnpj(NEW.cnpj)) THEN
   SET NEW.cnpj=NULL;
END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
